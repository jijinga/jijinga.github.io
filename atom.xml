<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寂静</title>
  
  
  <link href="https://jijinga.github.io/atom.xml" rel="self"/>
  
  <link href="https://jijinga.github.io/"/>
  <updated>2021-02-10T05:35:23.083Z</updated>
  <id>https://jijinga.github.io/</id>
  
  <author>
    <name>寂静</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高阶函数</title>
    <link href="https://jijinga.github.io/2021/02/10/hello-world/"/>
    <id>https://jijinga.github.io/2021/02/10/hello-world/</id>
    <published>2021-02-10T00:49:21.858Z</published>
    <updated>2021-02-10T05:35:23.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><blockquote><p>什么是高阶函数？</p></blockquote><h5 id="1-一个函数的参数，是一个函数（回调函数）"><a href="#1-一个函数的参数，是一个函数（回调函数）" class="headerlink" title="1.一个函数的参数，是一个函数（回调函数）"></a>1.一个函数的参数，是一个函数（回调函数）</h5><h5 id="2-一个函数执行，返回另一个函数（拆分函数）"><a href="#2-一个函数执行，返回另一个函数（拆分函数）" class="headerlink" title="2.一个函数执行，返回另一个函数（拆分函数）"></a>2.一个函数执行，返回另一个函数（拆分函数）</h5><h2 id="before-函数"><a href="#before-函数" class="headerlink" title="before 函数"></a>before 函数</h2><blockquote><p>希望将核心的代码逻辑封装起来， 在外部增加其他的功能.</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 在函数的原型上增加before方法，之后创建的函数都可以使用这个方法</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行添加的函数</span></span><br><span class="line">    fn();</span><br><span class="line">    <span class="comment">// 这里的this代表的就是核心函数本身</span></span><br><span class="line">    <span class="built_in">this</span>(...args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> say = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我是核心功能&quot;</span>, ...args);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newSay = say.before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我是添加的新功能&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">newSay(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a>事务机制</h2><blockquote><p>事务机制就是，当一个操作进行前，做了某件事。当进行后，做了某件事.</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> perform = <span class="function">(<span class="params">anymethod, wrappers</span>) =&gt;</span> &#123;</span><br><span class="line">  wrappers.forEach(<span class="function"><span class="params">wrap</span> =&gt;</span> &#123;</span><br><span class="line">    wrap.initilizae();</span><br><span class="line">  &#125;);</span><br><span class="line">  anymethod();</span><br><span class="line">  wrappers.forEach(<span class="function"><span class="params">wrap</span> =&gt;</span> &#123;</span><br><span class="line">    wrap.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">perform(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;说话&quot;</span>);</span><br><span class="line">&#125;, [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="title">initilizae</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;说话之前：你好&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">close</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;说话之后：再见&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="title">initilizae</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;说话之前：你好1&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">close</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;说话之后：再见1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>通过以上代码我们可以发现，我们在执行 <code>perform</code> 方法时，传递了一个数组，里面放置了两组不同的方法。</p><p>我们在函数调用时，先调用了所有 <code>initilizae</code> ，也就是调用之前要做的事情，紧接着我们执行了调用时<br>执行的方法，当调用完成时，再调用了所有 <code>close</code> ，也就是调用之后要做的事情。</p><h2 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h2><blockquote><p>将一个函数拆分为多个函数.</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkType = <span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> types = [<span class="string">&quot;Number&quot;</span>, <span class="string">&quot;String&quot;</span>, <span class="string">&quot;Boolean&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> utils = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">types.forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">  utils[<span class="string">&quot;is&quot;</span> + type] = checkType(type);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(utils.isString(<span class="string">&quot;123&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b, c, d, e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c + d + e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curring = <span class="function">(<span class="params">fn, arr = []</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = fn.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    arr = arr.concat(args);</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; len) &#123;</span><br><span class="line">      <span class="keyword">return</span> curring(fn, arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn(...arr);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r = curring(add)(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br></pre></td></tr></table></figure><h2 id="after-函数"><a href="#after-函数" class="headerlink" title="after 函数"></a>after 函数</h2><blockquote><p>当一个函数执行指定次数时，再执行某个方法.</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> after = <span class="function">(<span class="params">times, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (--times === <span class="number">0</span>) &#123;</span><br><span class="line">      fn();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAfter = after(<span class="number">3</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;三次后调用&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">newAfter();</span><br><span class="line">newAfter();</span><br><span class="line">newAfter();</span><br></pre></td></tr></table></figure><h2 id="after-函数的实际用法"><a href="#after-函数的实际用法" class="headerlink" title="after 函数的实际用法"></a>after 函数的实际用法</h2><blockquote><p>我们想等待两个文件读取完成之后在做某件事.</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> school = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> after = <span class="function">(<span class="params">times, fn</span>) =&gt;</span> <span class="function">() =&gt;</span> --times === <span class="number">0</span> &amp;&amp; fn();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAfter = after(<span class="number">2</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(school);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&quot;name.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  school[<span class="string">&quot;name&quot;</span>] = data;</span><br><span class="line">  newAfter();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&quot;age.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  school[<span class="string">&quot;age&quot;</span>] = data;</span><br><span class="line">  newAfter();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><blockquote><p>一个简单的发布订阅例子.</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> school = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> e = &#123;</span><br><span class="line">  arr: [],</span><br><span class="line">  <span class="function"><span class="title">on</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.arr.push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">emit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.arr.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">e.on(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 订阅</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">e.on(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 订阅</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(school).length === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(school);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&quot;name.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  school[<span class="string">&quot;name&quot;</span>] = data;</span><br><span class="line">  e.emit(); <span class="comment">// 发布</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&quot;age.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  school[<span class="string">&quot;age&quot;</span>] = data;</span><br><span class="line">  e.emit(); <span class="comment">// 发布</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote><p>观察者模式跟发布订阅有什么不同？</p></blockquote><p>在发布订阅中，发布跟订阅是没有包含关系的，是两个独立的个体，但在观察者模式中，被观察者中包含观察者。<br>观察者模式是包含发布订阅的。来看一个小例子，小宝宝将同时受到父母的观察。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.arr = [];</span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&quot;我很开心&quot;</span>; <span class="comment">// 状态</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">attach</span>(<span class="params">o</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 将观察者放到被观察者身上</span></span><br><span class="line">    <span class="built_in">this</span>.arr.push(o);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">setState</span>(<span class="params">newState</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.state = newState;</span><br><span class="line">    <span class="built_in">this</span>.arr.forEach(<span class="function"><span class="params">o</span> =&gt;</span> o.update(newState));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">newState</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;的小宝宝：&quot;</span> + newState);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Subject(<span class="string">&quot;小宝宝&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observer(<span class="string">&quot;我&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> Observer(<span class="string">&quot;我媳妇&quot;</span>);</span><br><span class="line"></span><br><span class="line">s.attach(o1);</span><br><span class="line">s.attach(o2);</span><br><span class="line">s.setState(<span class="string">&quot;我不开心了&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;什么是高阶函数？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;1-一个函数的参数，是一个函</summary>
      
    
    
    
    <category term="前端" scheme="https://jijinga.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Javascript" scheme="https://jijinga.github.io/tags/Javascript/"/>
    
    <category term="函数" scheme="https://jijinga.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
